name: Deploy to Railway

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cd backend && cargo fmt -- --check

    - name: Run clippy
      run: cd backend && cargo clippy -- -D warnings

    - name: Run tests
      run: cd backend && cargo test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

  deploy:
    name: Deploy to Railway
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Railway CLI
      run: npm install -g @railway/cli

    - name: Deploy to Railway
      run: railway up --service backend
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
        # Get the Railway domain from environment or use default pattern
        RAILWAY_DOMAIN="${{ secrets.RAILWAY_DOMAIN }}"
        if [ -z "$RAILWAY_DOMAIN" ]; then
          echo "Railway domain not set in secrets"
          exit 1
        fi
        
        # Health check
        for i in {1..10}; do
          if curl -f -s "https://$RAILWAY_DOMAIN/health" > /dev/null; then
            echo "‚úÖ Health check passed"
            exit 0
          else
            echo "‚è≥ Health check attempt $i/10 failed, retrying in 30s..."
            sleep 30
          fi
        done
        
        echo "‚ùå Health check failed after 10 attempts"
        exit 1

    - name: Notify success
      if: success()
      run: |
        echo "üöÄ Railway deployment successful!"
        echo "API URL: https://${{ secrets.RAILWAY_DOMAIN }}"
        
        # Optional: Send Slack notification
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ ReadMaker API deployed to Railway successfully!\nURL: https://${{ secrets.RAILWAY_DOMAIN }}"}' \
            "${{ secrets.SLACK_WEBHOOK_URL }}"
        fi

    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Railway deployment failed!"
        
        # Optional: Send Slack notification
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå ReadMaker API deployment to Railway failed!"}' \
            "${{ secrets.SLACK_WEBHOOK_URL }}"
        fi