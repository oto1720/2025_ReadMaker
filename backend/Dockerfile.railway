# Railway optimized Dockerfile for ReadMaker API
FROM rust:1.75-slim as builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files for caching
COPY Cargo.toml Cargo.lock ./
COPY api/Cargo.toml ./api/
COPY core/Cargo.toml ./core/
COPY shared/Cargo.toml ./shared/

# Create dummy source files for dependency caching
RUN mkdir -p api/src core/src shared/src && \
    echo "fn main() {}" > api/src/main.rs && \
    echo "// lib" > core/src/lib.rs && \
    echo "// lib" > shared/src/lib.rs

# Build dependencies only
RUN cargo build --release --bin api
RUN rm -rf api/src core/src shared/src

# Copy actual source code
COPY . .

# Build the application
RUN cargo build --release --bin api

# Production image
FROM debian:bullseye-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl1.1 \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the built binary
COPY --from=builder /app/target/release/api ./api

# Create a non-root user
RUN useradd -m -u 1001 appuser && \
    chown appuser:appuser /app/api && \
    chmod +x /app/api

USER appuser

# Expose the port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["./api"]